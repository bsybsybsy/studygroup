{"ast":null,"code":"import axios from'axios';// API 기본 설정\nconst api=axios.create({baseURL:'http://localhost:3001/api',headers:{'Content-Type':'application/json'}});// 요청 인터셉터 - 토큰 추가\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// 응답 인터셉터 - 에러 처리\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// 토큰이 만료된 경우에만 로그아웃\nconst token=localStorage.getItem('token');if(token){try{// JWT 토큰 디코딩 (페이로드만)\nconst payload=JSON.parse(atob(token.split('.')[1]));const currentTime=Math.floor(Date.now()/1000);// 토큰이 실제로 만료된 경우에만 로그아웃\nif(payload.exp&&payload.exp<currentTime){localStorage.removeItem('token');window.location.href='/login';}}catch(e){// 토큰 디코딩 실패 시 로그아웃\nlocalStorage.removeItem('token');window.location.href='/login';}}}return Promise.reject(error);});// 인증 관련 API\nexport const authAPI={login:data=>api.post('/auth/login',data),register:data=>api.post('/auth/register',data),googleLogin:()=>api.get('/auth/google')};// 스터디 포스트 관련 API\nexport const postAPI={getAllPosts:()=>api.get('/post'),getPost:id=>api.get(`/post/${id}`),createPost:data=>api.post('/post',data),updatePost:(id,data)=>api.patch(`/post/${id}`,data),deletePost:id=>api.delete(`/post/${id}`),joinStudy:(postId,answers)=>api.post(`/post/${postId}/join`,{answers}),leaveStudy:postId=>api.delete(`/post/${postId}/leave`),// 내가 만든 스터디 목록\ngetMyStudies:()=>api.get('/post/my-studies'),// 스터디 지원자 목록\ngetStudyApplications:postId=>api.get(`/post/${postId}/applications`),// 지원자 승인\nacceptApplicant:applicationId=>api.post(`/post/applications/${applicationId}/accept`),// 지원자 거절\ndeclineApplicant:applicationId=>api.post(`/post/applications/${applicationId}/decline`),// 스터디 세션 관련\ncreateStudySession:(postId,data)=>api.post(`/post/${postId}/sessions`,data),getStudySessions:postId=>api.get(`/post/${postId}/sessions`),updateStudySession:(sessionId,data)=>api.patch(`/post/sessions/${sessionId}`,data),startStudy:(postId,sessionId)=>api.post(`/post/${postId}/start/${sessionId}`)};// 댓글 관련 API\nexport const commentAPI={getComments:postId=>api.get('/comment',{params:{postId}}),createComment:data=>api.post('/comment',data),updateComment:(id,data)=>api.patch(`/comment/${id}`,data),deleteComment:id=>api.delete(`/comment/${id}`)};// 출석 관련 API\nexport const attendanceAPI={checkAttendance:(postId,data,file)=>{const formData=new FormData();formData.append('proof_text',data.proof_text);if(file){formData.append('proof_file',file);}return api.post(`/attendance/${postId}`,formData,{headers:{'Content-Type':'multipart/form-data'}});},checkAttendanceForSession:(sessionId,data,file)=>{const formData=new FormData();formData.append('proof_text',data.proof_text);if(file){formData.append('proof_file',file);}return api.post(`/attendance/session/${sessionId}`,formData,{headers:{'Content-Type':'multipart/form-data'}});},getAttendanceForSession:sessionId=>api.get(`/attendance/session/${sessionId}`)};// Firebase 관련 API\nexport const firebaseAPI={sendNotification:data=>api.post('/firebase/send-notification',data),startStudySessionReminder:()=>api.post('/firebase/study-session-reminder/start'),testStudySessionReminder:sessionId=>api.post(`/firebase/study-session-reminder/test/${sessionId}`),getStudySessionReminderStatus:()=>api.get('/firebase/study-session-reminder/status')};// 사용자 관련 API\nexport const userAPI={getCurrentUser:()=>api.get('/user/me'),updateUser:data=>api.patch('/user',data),updateFcmToken:token=>api.patch('/user/fcm-token',{fcmToken:token})};export default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","payload","JSON","parse","atob","split","currentTime","Math","floor","Date","now","exp","removeItem","window","location","href","e","authAPI","login","data","post","register","googleLogin","get","postAPI","getAllPosts","getPost","id","createPost","updatePost","patch","deletePost","delete","joinStudy","postId","answers","leaveStudy","getMyStudies","getStudyApplications","acceptApplicant","applicationId","declineApplicant","createStudySession","getStudySessions","updateStudySession","sessionId","startStudy","commentAPI","getComments","params","createComment","updateComment","deleteComment","attendanceAPI","checkAttendance","file","formData","FormData","append","proof_text","checkAttendanceForSession","getAttendanceForSession","firebaseAPI","sendNotification","startStudySessionReminder","testStudySessionReminder","getStudySessionReminderStatus","userAPI","getCurrentUser","updateUser","updateFcmToken","fcmToken"],"sources":["C:/Users/User/WebstormProjects/project3/studygroup-frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport { \n  User, \n  Post, \n  StudySession, \n  Comment, \n  Attendance, \n  LoginRequest, \n  RegisterRequest, \n  AuthResponse,\n  ApiResponse \n} from '../types';\n\n// API 기본 설정\nconst api: AxiosInstance = axios.create({\n  baseURL: 'http://localhost:3001/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 요청 인터셉터 - 토큰 추가\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터 - 에러 처리\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // 토큰이 만료된 경우에만 로그아웃\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          // JWT 토큰 디코딩 (페이로드만)\n          const payload = JSON.parse(atob(token.split('.')[1]));\n          const currentTime = Math.floor(Date.now() / 1000);\n          \n          // 토큰이 실제로 만료된 경우에만 로그아웃\n          if (payload.exp && payload.exp < currentTime) {\n            localStorage.removeItem('token');\n            window.location.href = '/login';\n          }\n        } catch (e) {\n          // 토큰 디코딩 실패 시 로그아웃\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// 인증 관련 API\nexport const authAPI = {\n  login: (data: LoginRequest): Promise<AxiosResponse<AuthResponse>> =>\n    api.post('/auth/login', data),\n  \n  register: (data: RegisterRequest): Promise<AxiosResponse<AuthResponse>> =>\n    api.post('/auth/register', data),\n  \n  googleLogin: (): Promise<AxiosResponse<any>> =>\n    api.get('/auth/google'),\n};\n\n// 스터디 포스트 관련 API\nexport const postAPI = {\n  getAllPosts: (): Promise<AxiosResponse<ApiResponse<Post[]>>> =>\n    api.get('/post'),\n  \n  getPost: (id: number): Promise<AxiosResponse<ApiResponse<Post>>> =>\n    api.get(`/post/${id}`),\n  \n  createPost: (data: any): Promise<AxiosResponse<ApiResponse<Post>>> =>\n    api.post('/post', data),\n  \n  updatePost: (id: number, data: any): Promise<AxiosResponse<ApiResponse<Post>>> =>\n    api.patch(`/post/${id}`, data),\n  \n  deletePost: (id: number): Promise<AxiosResponse<ApiResponse<void>>> =>\n    api.delete(`/post/${id}`),\n  \n  joinStudy: (postId: number, answers?: any): Promise<AxiosResponse<ApiResponse<any>>> =>\n    api.post(`/post/${postId}/join`, { answers }),\n  \n  leaveStudy: (postId: number): Promise<AxiosResponse<ApiResponse<void>>> =>\n    api.delete(`/post/${postId}/leave`),\n  \n  // 내가 만든 스터디 목록\n  getMyStudies: (): Promise<AxiosResponse<ApiResponse<Post[]>>> =>\n    api.get('/post/my-studies'),\n  \n  // 스터디 지원자 목록\n  getStudyApplications: (postId: number): Promise<AxiosResponse<ApiResponse<any[]>>> =>\n    api.get(`/post/${postId}/applications`),\n  \n  // 지원자 승인\n  acceptApplicant: (applicationId: number): Promise<AxiosResponse<ApiResponse<any>>> =>\n    api.post(`/post/applications/${applicationId}/accept`),\n  \n  // 지원자 거절\n  declineApplicant: (applicationId: number): Promise<AxiosResponse<ApiResponse<any>>> =>\n    api.post(`/post/applications/${applicationId}/decline`),\n  \n  // 스터디 세션 관련\n  createStudySession: (postId: number, data: any): Promise<AxiosResponse<ApiResponse<StudySession>>> =>\n    api.post(`/post/${postId}/sessions`, data),\n  \n  getStudySessions: (postId: number): Promise<AxiosResponse<ApiResponse<StudySession[]>>> =>\n    api.get(`/post/${postId}/sessions`),\n  \n  updateStudySession: (sessionId: number, data: any): Promise<AxiosResponse<ApiResponse<StudySession>>> =>\n    api.patch(`/post/sessions/${sessionId}`, data),\n  \n  startStudy: (postId: number, sessionId: number): Promise<AxiosResponse<ApiResponse<StudySession>>> =>\n    api.post(`/post/${postId}/start/${sessionId}`),\n};\n\n// 댓글 관련 API\nexport const commentAPI = {\n  getComments: (postId?: number): Promise<AxiosResponse<ApiResponse<Comment[]>>> =>\n    api.get('/comment', { params: { postId } }),\n  \n  createComment: (data: any): Promise<AxiosResponse<ApiResponse<Comment>>> =>\n    api.post('/comment', data),\n  \n  updateComment: (id: number, data: any): Promise<AxiosResponse<ApiResponse<Comment>>> =>\n    api.patch(`/comment/${id}`, data),\n  \n  deleteComment: (id: number): Promise<AxiosResponse<ApiResponse<void>>> =>\n    api.delete(`/comment/${id}`),\n};\n\n// 출석 관련 API\nexport const attendanceAPI = {\n  checkAttendance: (postId: number, data: any, file?: File): Promise<AxiosResponse<ApiResponse<Attendance>>> => {\n    const formData = new FormData();\n    formData.append('proof_text', data.proof_text);\n    if (file) {\n      formData.append('proof_file', file);\n    }\n    return api.post(`/attendance/${postId}`, formData, {\n      headers: { 'Content-Type': 'multipart/form-data' },\n    });\n  },\n  \n  checkAttendanceForSession: (sessionId: number, data: any, file?: File): Promise<AxiosResponse<ApiResponse<Attendance>>> => {\n    const formData = new FormData();\n    formData.append('proof_text', data.proof_text);\n    if (file) {\n      formData.append('proof_file', file);\n    }\n    return api.post(`/attendance/session/${sessionId}`, formData, {\n      headers: { 'Content-Type': 'multipart/form-data' },\n    });\n  },\n  \n  getAttendanceForSession: (sessionId: number): Promise<AxiosResponse<ApiResponse<Attendance[]>>> =>\n    api.get(`/attendance/session/${sessionId}`),\n};\n\n// Firebase 관련 API\nexport const firebaseAPI = {\n  sendNotification: (data: { token: string; title?: string; body?: string }): Promise<AxiosResponse<any>> =>\n    api.post('/firebase/send-notification', data),\n  \n  startStudySessionReminder: (): Promise<AxiosResponse<any>> =>\n    api.post('/firebase/study-session-reminder/start'),\n  \n  testStudySessionReminder: (sessionId: number): Promise<AxiosResponse<any>> =>\n    api.post(`/firebase/study-session-reminder/test/${sessionId}`),\n  \n  getStudySessionReminderStatus: (): Promise<AxiosResponse<any>> =>\n    api.get('/firebase/study-session-reminder/status'),\n};\n\n// 사용자 관련 API\nexport const userAPI = {\n  getCurrentUser: (): Promise<AxiosResponse<ApiResponse<User>>> =>\n    api.get('/user/me'),\n  \n  updateUser: (data: any): Promise<AxiosResponse<ApiResponse<User>>> =>\n    api.patch('/user', data),\n  \n  updateFcmToken: (token: string): Promise<AxiosResponse<ApiResponse<User>>> =>\n    api.patch('/user/fcm-token', { fcmToken: token }),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}