{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\WebstormProjects\\\\project3\\\\studygroup-frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      fetchCurrentUser();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const fetchCurrentUser = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        console.log('AuthContext: No token found, setting loading to false');\n        setLoading(false);\n        return;\n      }\n      console.log('AuthContext: Fetching user with token:', token);\n      const response = await fetch(\"http://localhost:3001/api/user/me\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('AuthContext: User data received:', data);\n        setUser(data.data);\n        console.log('AuthContext: User state updated:', data.data);\n      } else {\n        console.log('AuthContext: Failed to fetch user, removing token');\n        localStorage.removeItem(\"token\");\n      }\n    } catch (error) {\n      console.error(\"AuthContext: Failed to fetch user:\", error);\n      localStorage.removeItem(\"token\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    setLoading(true);\n    console.log('AuthContext: Starting login process');\n    try {\n      const response = await fetch(\"http://localhost:3001/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      console.log('AuthContext: Login response:', data);\n      if (response.ok) {\n        const token = data.token || data.data && data.data.token;\n        if (!token) {\n          throw new Error(\"토큰을 받지 못했습니다.\");\n        }\n        console.log('AuthContext: Token received, storing in localStorage');\n        localStorage.setItem(\"token\", token);\n        console.log('AuthContext: Fetching current user...');\n        await fetchCurrentUser();\n        console.log('AuthContext: Login process completed successfully');\n      } else {\n        throw new Error(data.message || \"로그인 실패\");\n      }\n    } catch (error) {\n      console.error(\"AuthContext: Login error:\", error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loginWithGoogle = async credential => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/api/auth/google\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          credential\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        const token = data.token || data.data && data.data.token;\n        if (!token) {\n          throw new Error(\"Google 로그인 중 토큰을 받지 못했습니다.\");\n        }\n        localStorage.setItem(\"token\", token);\n        await fetchCurrentUser();\n      } else {\n        throw new Error(data.message || \"Google 로그인 실패\");\n      }\n    } catch (error) {\n      console.error(\"Google login error:\", error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const registerWithGoogle = async credential => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/api/auth/google/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          credential\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        const token = data.token || data.data && data.data.token;\n        if (!token) {\n          throw new Error(\"Google 회원가입 중 토큰을 받지 못했습니다.\");\n        }\n        localStorage.setItem(\"token\", token);\n        await fetchCurrentUser();\n      } else {\n        throw new Error(data.message || \"Google 회원가입 실패\");\n      }\n    } catch (error) {\n      console.error(\"Google registration error:\", error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async (email, username, password) => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/api/auth/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          username,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Registration successful, no token needed\n      } else {\n        throw new Error(data.message || \"회원가입 실패\");\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"token\");\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    loginWithGoogle,\n    register,\n    registerWithGoogle,\n    logout,\n    fetchCurrentUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","fetchCurrentUser","console","log","response","fetch","headers","Authorization","ok","data","json","removeItem","error","login","email","password","method","body","JSON","stringify","setItem","message","loginWithGoogle","credential","registerWithGoogle","register","username","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/WebstormProjects/project3/studygroup-frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ninterface User {\r\n  id: number;\r\n  username: string;\r\n  email: string;\r\n  role?: string;\r\n  provider?: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  loginWithGoogle: (credential: string) => Promise<void>;\r\n  register: (email: string, username: string, password: string) => Promise<void>;\r\n  registerWithGoogle: (credential: string) => Promise<void>;\r\n  logout: () => void;\r\n  fetchCurrentUser: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      fetchCurrentUser();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const fetchCurrentUser = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      if (!token) {\r\n        console.log('AuthContext: No token found, setting loading to false');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      console.log('AuthContext: Fetching user with token:', token);\r\n      const response = await fetch(\"http://localhost:3001/api/user/me\", {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('AuthContext: User data received:', data);\r\n        setUser(data.data);\r\n        console.log('AuthContext: User state updated:', data.data);\r\n      } else {\r\n        console.log('AuthContext: Failed to fetch user, removing token');\r\n        localStorage.removeItem(\"token\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"AuthContext: Failed to fetch user:\", error);\r\n      localStorage.removeItem(\"token\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email: string, password: string) => {\r\n    setLoading(true);\r\n    console.log('AuthContext: Starting login process');\r\n    try {\r\n      const response = await fetch(\"http://localhost:3001/api/auth/login\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n      const data = await response.json();\r\n      console.log('AuthContext: Login response:', data);\r\n      \r\n      if (response.ok) {\r\n        const token = data.token || (data.data && data.data.token);\r\n        if (!token) {\r\n          throw new Error(\"토큰을 받지 못했습니다.\");\r\n        }\r\n        console.log('AuthContext: Token received, storing in localStorage');\r\n        localStorage.setItem(\"token\", token);\r\n        console.log('AuthContext: Fetching current user...');\r\n        await fetchCurrentUser();\r\n        console.log('AuthContext: Login process completed successfully');\r\n      } else {\r\n        throw new Error(data.message || \"로그인 실패\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"AuthContext: Login error:\", error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loginWithGoogle = async (credential: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(\"http://localhost:3001/api/auth/google\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ credential }),\r\n      });\r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        const token = data.token || (data.data && data.data.token);\r\n        if (!token) {\r\n          throw new Error(\"Google 로그인 중 토큰을 받지 못했습니다.\");\r\n        }\r\n        localStorage.setItem(\"token\", token);\r\n        await fetchCurrentUser();\r\n      } else {\r\n        throw new Error(data.message || \"Google 로그인 실패\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Google login error:\", error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const registerWithGoogle = async (credential: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(\"http://localhost:3001/api/auth/google/register\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ credential }),\r\n      });\r\n      const data = await response.json();\r\n      \r\n      if (response.ok) {\r\n        const token = data.token || (data.data && data.data.token);\r\n        if (!token) {\r\n          throw new Error(\"Google 회원가입 중 토큰을 받지 못했습니다.\");\r\n        }\r\n        localStorage.setItem(\"token\", token);\r\n        await fetchCurrentUser();\r\n      } else {\r\n        throw new Error(data.message || \"Google 회원가입 실패\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Google registration error:\", error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (email: string, username: string, password: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(\"http://localhost:3001/api/auth/register\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email, username, password }),\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        // Registration successful, no token needed\r\n      } else {\r\n        throw new Error(data.message || \"회원가입 실패\");\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem(\"token\");\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    loading,\r\n    login,\r\n    loginWithGoogle,\r\n    register,\r\n    registerWithGoogle,\r\n    logout,\r\n    fetchCurrentUser,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}