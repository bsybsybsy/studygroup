{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\WebstormProjects\\\\project3\\\\studygroup-frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI, userAPI } from '../services/api';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchCurrentUser();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const fetchCurrentUser = async () => {\n    try {\n      const response = await userAPI.getCurrentUser();\n      setUser(response.data.data);\n    } catch (error) {\n      console.error('Failed to fetch current user:', error);\n      localStorage.removeItem('token');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await authAPI.login({\n        email,\n        password\n      });\n      const {\n        token\n      } = response.data;\n      localStorage.setItem('token', token);\n      await fetchCurrentUser();\n      toast.success('로그인 성공!');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      toast.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || '로그인에 실패했습니다.');\n      throw error;\n    }\n  };\n  const register = async (email, username, password) => {\n    try {\n      const response = await authAPI.register({\n        email,\n        username,\n        password\n      });\n      const {\n        token\n      } = response.data;\n      localStorage.setItem('token', token);\n      await fetchCurrentUser();\n      toast.success('회원가입 성공!');\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      toast.error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || '회원가입에 실패했습니다.');\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    toast.success('로그아웃되었습니다.');\n  };\n  const updateFcmToken = async token => {\n    try {\n      const response = await userAPI.updateFcmToken(token);\n      setUser(response.data.data);\n    } catch (error) {\n      console.error('Failed to update FCM token:', error);\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateFcmToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","userAPI","toast","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","fetchCurrentUser","response","getCurrentUser","data","error","console","removeItem","login","email","password","setItem","success","_error$response","_error$response$data","message","register","username","_error$response2","_error$response2$data","logout","updateFcmToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/WebstormProjects/project3/studygroup-frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User } from '../types';\r\nimport { authAPI, userAPI } from '../services/api';\r\nimport toast from 'react-hot-toast';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (email: string, username: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  updateFcmToken: (token: string) => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      fetchCurrentUser();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const fetchCurrentUser = async () => {\r\n    try {\r\n      const response = await userAPI.getCurrentUser();\r\n      setUser(response.data.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch current user:', error);\r\n      localStorage.removeItem('token');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      const response = await authAPI.login({ email, password });\r\n      const { token } = response.data;\r\n      localStorage.setItem('token', token);\r\n      await fetchCurrentUser();\r\n      toast.success('로그인 성공!');\r\n    } catch (error: any) {\r\n      toast.error(error.response?.data?.message || '로그인에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (email: string, username: string, password: string) => {\r\n    try {\r\n      const response = await authAPI.register({ email, username, password });\r\n      const { token } = response.data;\r\n      localStorage.setItem('token', token);\r\n      await fetchCurrentUser();\r\n      toast.success('회원가입 성공!');\r\n    } catch (error: any) {\r\n      toast.error(error.response?.data?.message || '회원가입에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n    toast.success('로그아웃되었습니다.');\r\n  };\r\n\r\n  const updateFcmToken = async (token: string) => {\r\n    try {\r\n      const response = await userAPI.updateFcmToken(token);\r\n      setUser(response.data.data);\r\n    } catch (error) {\r\n      console.error('Failed to update FCM token:', error);\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateFcmToken,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}