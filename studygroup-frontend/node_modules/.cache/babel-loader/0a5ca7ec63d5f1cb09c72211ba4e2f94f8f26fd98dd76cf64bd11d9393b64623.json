{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\WebstormProjects\\\\project3\\\\studygroup-frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { userAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      fetchCurrentUser();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const fetchCurrentUser = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        console.log('AuthContext: No token found, setting loading to false');\n        setLoading(false);\n        return;\n      }\n      console.log('AuthContext: Fetching user with token:', token);\n      const response = await fetch(\"http://localhost:3001/api/user/me\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('AuthContext: User data received:', data);\n        setUser(data.data);\n        console.log('AuthContext: User state updated:', data.data);\n      } else {\n        console.log('AuthContext: Failed to fetch user, removing token');\n        localStorage.removeItem(\"token\");\n      }\n    } catch (error) {\n      console.error(\"AuthContext: Failed to fetch user:\", error);\n      localStorage.removeItem(\"token\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    setLoading(true);\n    console.log('AuthContext: Starting login process');\n    try {\n      const response = await fetch(\"http://localhost:3001/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      console.log('AuthContext: Login response:', data);\n      if (response.ok) {\n        const token = data.token || data.data && data.data.token;\n        if (!token) {\n          throw new Error(\"토큰을 받지 못했습니다.\");\n        }\n        console.log('AuthContext: Token received, storing in localStorage');\n        localStorage.setItem(\"token\", token);\n        console.log('AuthContext: Fetching current user...');\n        await fetchCurrentUser();\n\n        // FCM 토큰 업데이트 시도\n        await updateFCMTokenIfAvailable();\n        console.log('AuthContext: Login process completed successfully');\n      } else {\n        throw new Error(data.message || \"로그인 실패\");\n      }\n    } catch (error) {\n      console.error(\"AuthContext: Login error:\", error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // FCM 토큰 업데이트 함수\n  const updateFCMTokenIfAvailable = async () => {\n    try {\n      // 브라우저가 FCM을 지원하는지 확인\n      if ('serviceWorker' in navigator && 'PushManager' in window) {\n        // Firebase Messaging이 초기화되어 있는지 확인\n        if (window.firebase && window.firebase.messaging) {\n          const messaging = window.firebase.messaging();\n\n          // 알림 권한 확인\n          if (Notification.permission === 'granted') {\n            try {\n              // FCM 토큰 가져오기\n              const fcmToken = await messaging.getToken();\n              if (fcmToken) {\n                console.log('AuthContext: FCM token received, updating backend');\n                // 백엔드로 FCM 토큰 전송\n                await userAPI.updateFCMToken(fcmToken);\n                console.log('AuthContext: FCM token updated successfully');\n              }\n            } catch (fcmError) {\n              console.warn('AuthContext: Failed to get FCM token:', fcmError);\n            }\n          } else {\n            console.log('AuthContext: Notification permission not granted');\n          }\n        } else {\n          console.log('AuthContext: Firebase messaging not available');\n        }\n      } else {\n        console.log('AuthContext: FCM not supported in this browser');\n      }\n    } catch (error) {\n      console.warn('AuthContext: FCM token update failed:', error);\n    }\n  };\n  const loginWithGoogle = async credential => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/api/auth/google\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          credential\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        const token = data.token || data.data && data.data.token;\n        if (!token) {\n          throw new Error(\"Google 로그인 중 토큰을 받지 못했습니다.\");\n        }\n        localStorage.setItem(\"token\", token);\n        await fetchCurrentUser();\n      } else {\n        throw new Error(data.message || \"Google 로그인 실패\");\n      }\n    } catch (error) {\n      console.error(\"Google login error:\", error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const registerWithGoogle = async credential => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/api/auth/google/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          credential\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        const token = data.token || data.data && data.data.token;\n        if (!token) {\n          throw new Error(\"Google 회원가입 중 토큰을 받지 못했습니다.\");\n        }\n        localStorage.setItem(\"token\", token);\n        await fetchCurrentUser();\n      } else {\n        throw new Error(data.message || \"Google 회원가입 실패\");\n      }\n    } catch (error) {\n      console.error(\"Google registration error:\", error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async (email, username, password) => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/api/auth/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          username,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Registration successful, no token needed\n      } else {\n        throw new Error(data.message || \"회원가입 실패\");\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"token\");\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    loginWithGoogle,\n    register,\n    registerWithGoogle,\n    logout,\n    fetchCurrentUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","userAPI","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","fetchCurrentUser","console","log","response","fetch","headers","Authorization","ok","data","json","removeItem","error","login","email","password","method","body","JSON","stringify","setItem","updateFCMTokenIfAvailable","message","navigator","window","firebase","messaging","Notification","permission","fcmToken","getToken","updateFCMToken","fcmError","warn","loginWithGoogle","credential","registerWithGoogle","register","username","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/WebstormProjects/project3/studygroup-frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { userAPI } from '../services/api';\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  role?: string;\n  provider?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  loginWithGoogle: (credential: string) => Promise<void>;\n  register: (email: string, username: string, password: string) => Promise<void>;\n  registerWithGoogle: (credential: string) => Promise<void>;\n  logout: () => void;\n  fetchCurrentUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      fetchCurrentUser();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchCurrentUser = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        console.log('AuthContext: No token found, setting loading to false');\n        setLoading(false);\n        return;\n      }\n\n      console.log('AuthContext: Fetching user with token:', token);\n      const response = await fetch(\"http://localhost:3001/api/user/me\", {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        console.log('AuthContext: User data received:', data);\n        setUser(data.data);\n        console.log('AuthContext: User state updated:', data.data);\n      } else {\n        console.log('AuthContext: Failed to fetch user, removing token');\n        localStorage.removeItem(\"token\");\n      }\n    } catch (error) {\n      console.error(\"AuthContext: Failed to fetch user:\", error);\n      localStorage.removeItem(\"token\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    setLoading(true);\n    console.log('AuthContext: Starting login process');\n    try {\n      const response = await fetch(\"http://localhost:3001/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email, password }),\n      });\n      const data = await response.json();\n      console.log('AuthContext: Login response:', data);\n      \n      if (response.ok) {\n        const token = data.token || (data.data && data.data.token);\n        if (!token) {\n          throw new Error(\"토큰을 받지 못했습니다.\");\n        }\n        console.log('AuthContext: Token received, storing in localStorage');\n        localStorage.setItem(\"token\", token);\n        console.log('AuthContext: Fetching current user...');\n        await fetchCurrentUser();\n        \n        // FCM 토큰 업데이트 시도\n        await updateFCMTokenIfAvailable();\n        \n        console.log('AuthContext: Login process completed successfully');\n      } else {\n        throw new Error(data.message || \"로그인 실패\");\n      }\n    } catch (error) {\n      console.error(\"AuthContext: Login error:\", error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // FCM 토큰 업데이트 함수\n  const updateFCMTokenIfAvailable = async () => {\n    try {\n      // 브라우저가 FCM을 지원하는지 확인\n      if ('serviceWorker' in navigator && 'PushManager' in window) {\n        // Firebase Messaging이 초기화되어 있는지 확인\n        if (window.firebase && window.firebase.messaging) {\n          const messaging = window.firebase.messaging();\n          \n          // 알림 권한 확인\n          if (Notification.permission === 'granted') {\n            try {\n              // FCM 토큰 가져오기\n              const fcmToken = await messaging.getToken();\n              if (fcmToken) {\n                console.log('AuthContext: FCM token received, updating backend');\n                // 백엔드로 FCM 토큰 전송\n                await userAPI.updateFCMToken(fcmToken);\n                console.log('AuthContext: FCM token updated successfully');\n              }\n            } catch (fcmError) {\n              console.warn('AuthContext: Failed to get FCM token:', fcmError);\n            }\n          } else {\n            console.log('AuthContext: Notification permission not granted');\n          }\n        } else {\n          console.log('AuthContext: Firebase messaging not available');\n        }\n      } else {\n        console.log('AuthContext: FCM not supported in this browser');\n      }\n    } catch (error) {\n      console.warn('AuthContext: FCM token update failed:', error);\n    }\n  };\n\n  const loginWithGoogle = async (credential: string) => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/api/auth/google\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ credential }),\n      });\n      const data = await response.json();\n      \n      if (response.ok) {\n        const token = data.token || (data.data && data.data.token);\n        if (!token) {\n          throw new Error(\"Google 로그인 중 토큰을 받지 못했습니다.\");\n        }\n        localStorage.setItem(\"token\", token);\n        await fetchCurrentUser();\n      } else {\n        throw new Error(data.message || \"Google 로그인 실패\");\n      }\n    } catch (error) {\n      console.error(\"Google login error:\", error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const registerWithGoogle = async (credential: string) => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/api/auth/google/register\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ credential }),\n      });\n      const data = await response.json();\n      \n      if (response.ok) {\n        const token = data.token || (data.data && data.data.token);\n        if (!token) {\n          throw new Error(\"Google 회원가입 중 토큰을 받지 못했습니다.\");\n        }\n        localStorage.setItem(\"token\", token);\n        await fetchCurrentUser();\n      } else {\n        throw new Error(data.message || \"Google 회원가입 실패\");\n      }\n    } catch (error) {\n      console.error(\"Google registration error:\", error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (email: string, username: string, password: string) => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:3001/api/auth/register\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email, username, password }),\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Registration successful, no token needed\n      } else {\n        throw new Error(data.message || \"회원가입 실패\");\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"token\");\n  };\n\n  const value: AuthContextType = {\n    user,\n    loading,\n    login,\n    loginWithGoogle,\n    register,\n    registerWithGoogle,\n    logout,\n    fetchCurrentUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}